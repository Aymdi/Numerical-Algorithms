from partie1_q1 import calc_ti,calc_tji

def facto_dense_incomplete_REC(A,T,i):

    '''
    facto_dense_REC(...)

    completes T with the value of tii and tji for j from 0 to i-1 of the dense Cholesky factorization and returns a call of itself for next index

    Parameters
    ----------

    A : positive definite square matrix

    T : the result of dense Cholesky factorization

    i : positive integer between 0 and the dimension of A-1

    Returns
    -------

    out : itself with a call on next index

    Time complexity
    ---------------

    O(n(n+1)/2)

    Space complexity
    ----------------

    O(1)

    '''

    if i == len(A) :
        return T
    T[i,i]=calc_ti(A,T,i)
        
    for j in range(i+1,len(A)) :
        if A[j,i] != 0 :    
            T[j,i] = calc_tji(A,T,i,j)
    return facto_dense_incomplete_REC(A,T,i+1)
    
def facto_dense_incomplete(A) :

    '''
    facto_dense_REC(...)

    returns the matrix of the dense Cholesky factorization 

    Parameters
    ----------

    A : positive definite square matrix

    Returns
    -------

    out : the matrix of the dense Cholesky factorization

    Time complexity
    ---------------

    O(n(n+1)/2)

    Space complexity
    ----------------

    O(n**2)

    '''

    T = np.zeros([len(A),len(A)])
    return facto_dense_REC(A,T,0)
